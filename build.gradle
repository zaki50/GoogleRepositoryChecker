// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.versions = [
            'compileSdk': 28,
            'minSdk': 21,
            'targetSdk': 28,
            'buildTools': '28.0.1',
            'kotlin': '1.2.51',
            'supportLibrary': '28.0.0-beta01',
            'constraintLayout': '1.1.2',
            'architectureComponent': '1.1.1',
            // https://firebase.google.com/support/release-notes/android?hl=en
            // https://github.com/realm/realm-java
            'realm': '5.4.0',
            // https://github.com/realm/realm-android-adapters
            'realmAdapter': '3.0.0',
            // http://square.github.io/retrofit/
            'retrofit': '2.4.0',
            'okhttp': '3.11.0',
            // https://github.com/ReactiveX/RxJava
            'rxJava': '2.1.16',
            'rxAndroid': '2.0.2',
            'sectionedRecycleview': '0.5.0',
            'toothpick': '1.0.7',
            'junit': '4.12',
            'espresso': '3.0.1'
    ]
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0-alpha03'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "io.realm:realm-gradle-plugin:$versions.realm"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
}

subprojects {
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                // Force all of the primary support libraries to use the same version.
                if (details.requested.group == 'android.arch.lifecycle') {
                    details.useVersion versions.architectureComponent
                }
                if (details.requested.group == 'com.android.support'
                        && details.requested.name != 'multidex'
                        && details.requested.name != 'multidex-instrumentation') {
                    details.useVersion versions.supportLibrary
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9-rc-1'
    //noinspection GroovyAccessibility
    distributionType = 'all'
}

